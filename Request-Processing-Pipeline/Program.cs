using Request_Processing_Pipeline;
using RequestProcessingPipeline;

var builder = WebApplication.CreateBuilder(args);//обьект WebApplication реализует контракт IApplicationBuilder , из этого можно сказать что этот обьект и представляет собой тот самый middleware конвеер 

// Все сессии работают поверх объекта IDistributedCache, и 
// ASP.NET Core предоставляет встроенную реализацию IDistributedCache
builder.Services.AddDistributedMemoryCache();// добавляем IDistributedMemoryCache
builder.Services.AddSession();  // Добавляем сервисы сессии
var app = builder.Build();//строим экземпляр веб приожения

app.UseSession();   // Добавляем middleware-компонент для работы с сессиями

// Добавляем middleware-компоненты в конвейер обработки запроса.
app.UseSessionClear();
app.UseFromHundredToThousand();//100-999
app.UseFromTwentyToHundred();// 20-100//метод расширения который внутри регистрирует компонент
app.UseFromElevenToNineteen();//11-19
app.UseFromOneToTen();//1-9


app.Run();

//Первый компонент оценивает само цисло, если число 20-100 то первый компонент сам его обработает и станет терминальным и не отдаст его дальше .
//Если первый компонент увидит что число меньше 20 то отдаст его вперед следуешему компоненту второму .
//Второй компонент оценивает число и если оно от 11 до 19 то это его проблема .
//Если число меньше 19 то второй компонет говорит что проблема не моя , моя хата скраю ничего не знаю, и отдает эту задачу третьему компоненту ничего не делая, теперь это проблема третьего.


//?Number=25 ctrl+F10 отладочка   string? token = context.Request.Query["number"]; 
//Первый компонент работа twenty вернул ответ - функция терминального
//Второй компонент ниче не делает а просто возвращает управление назад к предыдущему компоненту который его вызвал
//Третий записал в сессию five и передал управление назад второму

//?Number=13 ctrl+F10  отладочка string? token = context.Request.Query["number"]; 
//Первый компонент ниче не делает а просто передает управление второму но при этом первый будет его ждать когда второй вернет управление назад.
//Второй компонент сам обрабатывает запрос и отдает ответ клиенту- функция терминального WriteAsync.
//До третьего вообще дело не дошло.